redis:
  ## @section Global parameters
  ## Global Docker image parameters
  ## Please, note that this will override the image parameters, including dependencies, configured to use the global value
  ## Current available global Docker image parameters: imageRegistry, imagePullSecrets and storageClass
  ##

  ## @param global.imageRegistry Global Docker image registry
  ## @param global.imagePullSecrets Global Docker registry secret names as an array
  ## @param global.storageClass Global StorageClass for Persistent Volume(s)
  ## @param global.redis.password Global Redis&reg; password (overrides `auth.password`)
  ##
  global:
    imageRegistry: ""
    imagePullSecrets: []
    storageClass: ""
    redis:
      password: ""

  ## @section Common parameters
  ##

  ## @param kubeVersion Override Kubernetes version
  ##
  kubeVersion: ""
  ## @param nameOverride String to partially override common.names.fullname
  ##
  nameOverride: ""
  ## @param fullnameOverride String to fully override common.names.fullname
  ##
  fullnameOverride: ""
  ## @param commonLabels Labels to add to all deployed objects
  ##
  commonLabels: {}
  ## @param commonAnnotations Annotations to add to all deployed objects
  ##
  commonAnnotations: {}
  ## @param secretAnnotations Annotations to add to secret
  ##
  secretAnnotations: {}
  ## @param clusterDomain Kubernetes cluster domain name
  ##
  clusterDomain: cluster.local
  ## @param extraDeploy Array of extra objects to deploy with the release
  ##
  extraDeploy: []

  ## Enable diagnostic mode in the deployment
  ##
  diagnosticMode:
    ## @param diagnosticMode.enabled Enable diagnostic mode (all probes will be disabled and the command will be overridden)
    ##
    enabled: false
    ## @param diagnosticMode.command Command to override all containers in the deployment
    ##
    command:
      - sleep
    ## @param diagnosticMode.args Args to override all containers in the deployment
    ##
    args:
      - infinity

  ## @section Redis&reg; Image parameters
  ##

  ## Bitnami Redis&reg; image
  ## ref: https://hub.docker.com/r/bitnami/redis/tags/
  ## @param image.registry Redis&reg; image registry
  ## @param image.repository Redis&reg; image repository
  ## @param image.tag Redis&reg; image tag (immutable tags are recommended)
  ## @param image.digest Redis&reg; image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
  ## @param image.pullPolicy Redis&reg; image pull policy
  ## @param image.pullSecrets Redis&reg; image pull secrets
  ## @param image.debug Enable image debug mode
  ##
  image:
    registry: docker.io
    repository: bitnami/redis
    tag: 7.0.5-debian-11-r3
    digest: ""
    ## Specify a imagePullPolicy
    ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
    ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
    ##
    pullPolicy: IfNotPresent
    ## Optionally specify an array of imagePullSecrets.
    ## Secrets must be manually created in the namespace.
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
    ## e.g:
    ## pullSecrets:
    ##   - myRegistryKeySecretName
    ##
    pullSecrets: []
    ## Enable debug mode
    ##
    debug: false

  ## @section Redis&reg; common configuration parameters
  ## https://github.com/bitnami/containers/tree/main/bitnami/redis#configuration
  ##

  ## @param architecture Redis&reg; architecture. Allowed values: `standalone` or `replication`
  ##
  architecture: replication
  ## Redis&reg; Authentication parameters
  ## ref: https://github.com/bitnami/containers/tree/main/bitnami/redis#setting-the-server-password-on-first-run
  ##
  auth:
    ## @param auth.enabled Enable password authentication
    ##
    enabled: false
    ## @param auth.sentinel Enable password authentication on sentinels too
    ##
    sentinel: false
    ## @param auth.password Redis&reg; password
    ## Defaults to a random 10-character alphanumeric string if not set
    ##
    password: ""
    ## @param auth.existingSecret The name of an existing secret with Redis&reg; credentials
    ## NOTE: When it's set, the previous `auth.password` parameter is ignored
    ##
    existingSecret: ""
    ## @param auth.existingSecretPasswordKey Password key to be retrieved from existing secret
    ## NOTE: ignored unless `auth.existingSecret` parameter is set
    ##
    existingSecretPasswordKey: ""
    ## @param auth.usePasswordFiles Mount credentials as files instead of using an environment variable
    ##
    usePasswordFiles: false

  ## @param commonConfiguration [string] Common configuration to be added into the ConfigMap
  ## ref: https://redis.io/topics/config
  ##
  commonConfiguration: |-
    # Enable AOF https://redis.io/topics/persistence#append-only-file
    appendonly yes
    # Disable RDB persistence, AOF persistence already enabled.
    save ""
    maxmemory 2000mb
    maxmemory-policy allkeys-lru

  ## @param existingConfigmap The name of an existing ConfigMap with your custom configuration for Redis&reg; nodes
  ##
  existingConfigmap: ""

  sentinel:
    ## @param sentinel.enabled Use Redis&reg; Sentinel on Redis&reg; pods.
    ## IMPORTANT: this will disable the master and replicas services and
    ## create a single Redis&reg; service exposing both the Redis and Sentinel ports
    ##
    enabled: true
    ## Bitnami Redis&reg; Sentinel image version
    ## ref: https://hub.docker.com/r/bitnami/redis-sentinel/tags/
    ## @param sentinel.image.registry Redis&reg; Sentinel image registry
    ## @param sentinel.image.repository Redis&reg; Sentinel image repository
    ## @param sentinel.image.tag Redis&reg; Sentinel image tag (immutable tags are recommended)
    ## @param sentinel.image.digest Redis&reg; Sentinel image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag
    ## @param sentinel.image.pullPolicy Redis&reg; Sentinel image pull policy
    ## @param sentinel.image.pullSecrets Redis&reg; Sentinel image pull secrets
    ## @param sentinel.image.debug Enable image debug mode
    ##
    image:
      registry: docker.io
      repository: bitnami/redis-sentinel
      tag: 7.0.5-debian-11-r2
      digest: ""
      ## Specify a imagePullPolicy
      ## Defaults to 'Always' if image tag is 'latest', else set to 'IfNotPresent'
      ## ref: https://kubernetes.io/docs/user-guide/images/#pre-pulling-images
      ##
      pullPolicy: IfNotPresent
      ## Optionally specify an array of imagePullSecrets.
      ## Secrets must be manually created in the namespace.
      ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
      ## e.g:
      ## pullSecrets:
      ##   - myRegistryKeySecretName
      ##
      pullSecrets: []
      ## Enable debug mode
      ##
      debug: false
    ## @param sentinel.masterSet Master set name
    ##
    masterSet: mymaster
    ## @param sentinel.quorum Sentinel Quorum
    ##
    quorum: 2
    ## @param sentinel.getMasterTimeout Amount of time to allow before get_sentinel_master_info() times out.
    ## NOTE: This is directly related to the startupProbes which are configured to run every 10 seconds for a total of 22 failures. If adjusting this value, also adjust the startupProbes.
    getMasterTimeout: 220
    ## @param sentinel.automateClusterRecovery Automate cluster recovery in cases where the last replica is not considered a good replica and Sentinel won't automatically failover to it.
    ## This also prevents any new replica from starting until the last remaining replica is elected as master to guarantee that it is the one to be elected by Sentinel, and not a newly started replica with no data.
    ## NOTE: This feature requires a "downAfterMilliseconds" value less or equal to 2000.
    ##
    automateClusterRecovery: false
    ## Sentinel timing restrictions
    ## @param sentinel.downAfterMilliseconds Timeout for detecting a Redis&reg; node is down
    ## @param sentinel.failoverTimeout Timeout for performing a election failover
    ##
    downAfterMilliseconds: 60000
    failoverTimeout: 180000
    ## @param sentinel.parallelSyncs Number of replicas that can be reconfigured in parallel to use the new master after a failover
    ##
    parallelSyncs: 1
    ## @param sentinel.configuration Configuration for Redis&reg; Sentinel nodes
    ## ref: https://redis.io/topics/sentinel
    ##
    configuration: ""
    ## @param sentinel.command Override default container command (useful when using custom images)
    ##
    command: []
    ## @param sentinel.args Override default container args (useful when using custom images)
    ##
    args: []
    ## @param sentinel.preExecCmds Additional commands to run prior to starting Redis&reg; Sentinel
    ##
    preExecCmds: []
    ## @param sentinel.extraEnvVars Array with extra environment variables to add to Redis&reg; Sentinel nodes
    ## e.g:
    ## extraEnvVars:
    ##   - name: FOO
    ##     value: "bar"
    ##
    extraEnvVars: []
    ## @param sentinel.extraEnvVarsCM Name of existing ConfigMap containing extra env vars for Redis&reg; Sentinel nodes
    ##
    extraEnvVarsCM: ""
    ## @param sentinel.extraEnvVarsSecret Name of existing Secret containing extra env vars for Redis&reg; Sentinel nodes
    ##
    extraEnvVarsSecret: ""
    ## @param sentinel.externalMaster.enabled Use external master for bootstrapping
    ## @param sentinel.externalMaster.host External master host to bootstrap from
    ## @param sentinel.externalMaster.port Port for Redis service external master host
    ##
    externalMaster:
      enabled: false
      host: ""
      port: 6379
    ## @param sentinel.containerPorts.sentinel Container port to open on Redis&reg; Sentinel nodes
    ##
    containerPorts:
      sentinel: 26379
    ## Configure extra options for Redis&reg; containers' liveness and readiness probes
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/#configure-probes
    ## @param sentinel.startupProbe.enabled Enable startupProbe on Redis&reg; Sentinel nodes
    ## @param sentinel.startupProbe.initialDelaySeconds Initial delay seconds for startupProbe
    ## @param sentinel.startupProbe.periodSeconds Period seconds for startupProbe
    ## @param sentinel.startupProbe.timeoutSeconds Timeout seconds for startupProbe
    ## @param sentinel.startupProbe.failureThreshold Failure threshold for startupProbe
    ## @param sentinel.startupProbe.successThreshold Success threshold for startupProbe
    ##
    startupProbe:
      enabled: true
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 22
    ## @param sentinel.livenessProbe.enabled Enable livenessProbe on Redis&reg; Sentinel nodes
    ## @param sentinel.livenessProbe.initialDelaySeconds Initial delay seconds for livenessProbe
    ## @param sentinel.livenessProbe.periodSeconds Period seconds for livenessProbe
    ## @param sentinel.livenessProbe.timeoutSeconds Timeout seconds for livenessProbe
    ## @param sentinel.livenessProbe.failureThreshold Failure threshold for livenessProbe
    ## @param sentinel.livenessProbe.successThreshold Success threshold for livenessProbe
    ##
    livenessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 5
      successThreshold: 1
      failureThreshold: 5
    ## @param sentinel.readinessProbe.enabled Enable readinessProbe on Redis&reg; Sentinel nodes
    ## @param sentinel.readinessProbe.initialDelaySeconds Initial delay seconds for readinessProbe
    ## @param sentinel.readinessProbe.periodSeconds Period seconds for readinessProbe
    ## @param sentinel.readinessProbe.timeoutSeconds Timeout seconds for readinessProbe
    ## @param sentinel.readinessProbe.failureThreshold Failure threshold for readinessProbe
    ## @param sentinel.readinessProbe.successThreshold Success threshold for readinessProbe
    ##
    readinessProbe:
      enabled: true
      initialDelaySeconds: 20
      periodSeconds: 5
      timeoutSeconds: 1
      successThreshold: 1
      failureThreshold: 5
    ## @param sentinel.customStartupProbe Custom startupProbe that overrides the default one
    ##
    customStartupProbe: {}
    ## @param sentinel.customLivenessProbe Custom livenessProbe that overrides the default one
    ##
    customLivenessProbe: {}
    ## @param sentinel.customReadinessProbe Custom readinessProbe that overrides the default one
    ##
    customReadinessProbe: {}
    ## Persistence parameters
    ## ref: https://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    persistence:
      ## @param sentinel.persistence.enabled Enable persistence on Redis&reg; sentinel nodes using Persistent Volume Claims (Experimental)
      ##
      enabled: false
    resources:
      limits:
       cpu: 2000m
       memory: 2500Mi
      requests:
        cpu: 250m
        memory: 100Mi
    ## Configure Container Security Context
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
    ## @param sentinel.containerSecurityContext.enabled Enabled Redis&reg; Sentinel containers' Security Context
    ## @param sentinel.containerSecurityContext.runAsUser Set Redis&reg; Sentinel containers' Security Context runAsUser
    ##
    containerSecurityContext:
      enabled: true
      runAsUser: 1001
    ## @param sentinel.lifecycleHooks for the Redis&reg; sentinel container(s) to automate configuration before or after startup
    ##
    lifecycleHooks: {}
    ## @param sentinel.extraVolumes Optionally specify extra list of additional volumes for the Redis&reg; Sentinel
    ##
    extraVolumes: []
    ## @param sentinel.extraVolumeMounts Optionally specify extra list of additional volumeMounts for the Redis&reg; Sentinel container(s)
    ##
    extraVolumeMounts: []
    ## Redis&reg; Sentinel service parameters
    ##
    service:
      ## @param sentinel.service.type Redis&reg; Sentinel service type
      ##
      type: ClusterIP
      ## @param sentinel.service.ports.redis Redis&reg; service port for Redis&reg;
      ## @param sentinel.service.ports.sentinel Redis&reg; service port for Redis&reg; Sentinel
      ##
      ports:
        redis: 6379
        sentinel: 26379
      ## @param sentinel.service.nodePorts.redis Node port for Redis&reg;
      ## @param sentinel.service.nodePorts.sentinel Node port for Sentinel
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
      ## NOTE: choose port between <30000-32767>
      ## NOTE: By leaving these values blank, they will be generated by ports-configmap
      ##       If setting manually, please leave at least replica.replicaCount + 1 in between sentinel.service.nodePorts.redis and sentinel.service.nodePorts.sentinel to take into account the ports that will be created while incrementing that base port
      ##
      nodePorts:
        redis: ""
        sentinel: ""
      ## @param sentinel.service.externalTrafficPolicy Redis&reg; Sentinel service external traffic policy
      ## ref: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/#preserving-the-client-source-ip
      ##
      externalTrafficPolicy: Cluster
      ## @param sentinel.service.extraPorts Extra ports to expose (normally used with the `sidecar` value)
      ##
      extraPorts: []
      ## @param sentinel.service.clusterIP Redis&reg; Sentinel service Cluster IP
      ##
      clusterIP: ""
      ## @param sentinel.service.loadBalancerIP Redis&reg; Sentinel service Load Balancer IP
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#internal-load-balancer
      ##
      loadBalancerIP: ""
      ## @param sentinel.service.loadBalancerSourceRanges Redis&reg; Sentinel service Load Balancer sources
      ## https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/#restrict-access-for-loadbalancer-service
      ## e.g.
      ## loadBalancerSourceRanges:
      ##   - 10.10.10.0/24
      ##
      loadBalancerSourceRanges: []
      ## @param sentinel.service.annotations Additional custom annotations for Redis&reg; Sentinel service
      ##
      annotations: {}
      ## @param sentinel.service.sessionAffinity Session Affinity for Kubernetes service, can be "None" or "ClientIP"
      ## If "ClientIP", consecutive client requests will be directed to the same Pod
      ## ref: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
      ##
      sessionAffinity: None
      ## @param sentinel.service.sessionAffinityConfig Additional settings for the sessionAffinity
      ## sessionAffinityConfig:
      ##   clientIP:
      ##     timeoutSeconds: 300
      ##
      sessionAffinityConfig: {}
    ## @param sentinel.terminationGracePeriodSeconds Integer setting the termination grace period for the redis-node pods
    ##
    terminationGracePeriodSeconds: 30

  ## ServiceAccount configuration
  ##
  serviceAccount:
    ## @param serviceAccount.create Specifies whether a ServiceAccount should be created
    ##
    create: true
    ## @param serviceAccount.name The name of the ServiceAccount to use.
    ## If not set and create is true, a name is generated using the common.names.fullname template
    ##
    name: ""
    ## @param serviceAccount.automountServiceAccountToken Whether to auto mount the service account token
    ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/#use-the-default-service-account-to-access-the-api-server
    ##
    automountServiceAccountToken: true
    ## @param serviceAccount.annotations Additional custom annotations for the ServiceAccount
    ##
    annotations: {}
